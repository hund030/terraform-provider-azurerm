// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm



func resourceArmPrivateEndpoint() *schema.Resource {
    return &schema.Resource{
        Create: resourceArmPrivateEndpointCreateUpdate,
        Read: resourceArmPrivateEndpointRead,
        Update: resourceArmPrivateEndpointCreateUpdate,
        Delete: resourceArmPrivateEndpointDelete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },


        Schema: map[string]*schema.Schema{
            "name": {
                Type: schema.TypeString,
                Required: true,
                ForceNew: true,
                ValidateFunc: validate.NoEmptyStrings,
            },

            "name": {
                Type: schema.TypeString,
                Computed: true,
            },

            "location": azure.SchemaLocation(),

            "resource_group": azure.SchemaResourceGroupNameDiffSuppress(),

            "etag": {
                Type: schema.TypeString,
                Optional: true,
                ForceNew: true,
            },

            "manual_private_link_service_connections": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "group_ids": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_link_service_connection_state": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "action_required": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "description": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "private_link_service_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "request_message": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "private_link_service_connections": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "group_ids": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_link_service_connection_state": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "action_required": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "description": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "status": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "private_link_service_id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "request_message": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                    },
                },
            },

            "subnet": {
                Type: schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "address_prefix": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "address_prefixes": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "delegations": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "nat_gateway": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "network_security_group": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tagsSchema(),
                                },
                            },
                        },
                        "private_endpoint_network_policies": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "private_link_service_network_policies": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "resource_navigation_links": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "route_table": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tagsSchema(),
                                },
                            },
                        },
                        "service_association_links": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "service_endpoint_policies": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "tags": tagsSchema(),
                                },
                            },
                        },
                        "service_endpoints": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "locations": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "service": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "tags": tagsSchema(),

            "network_interfaces": {
                Type: schema.TypeList,
                Computed: true,
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                        "dns_settings": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "applied_dns_servers": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "dns_servers": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "internal_dns_name_label": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "internal_domain_name_suffix": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "internal_fqdn": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "enable_accelerated_networking": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "enable_ipforwarding": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "etag": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "hosted_workloads": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "id": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "ip_configurations": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "location": azure.SchemaLocation(),
                        "mac_address": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "name": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "network_security_group": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "tags": tagsSchema(),
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "primary": {
                            Type: schema.TypeBool,
                            Optional: true,
                        },
                        "private_endpoint": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "location": azure.SchemaLocation(),
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "tags": tagsSchema(),
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "provisioning_state": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "resource_guid": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "tags": tagsSchema(),
                        "tap_configurations": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "etag": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "name": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                    "type": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "type": {
                            Type: schema.TypeString,
                            Optional: true,
                        },
                        "virtual_machine": {
                            Type: schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                                Schema: map[string]*schema.Schema{
                                    "id": {
                                        Type: schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                    },
                },
            },

            "type": {
                Type: schema.TypeString,
                Computed: true,
            },
        },
    }
}

func resourceArmPrivateEndpointCreateUpdate(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).privateEndpointsClient
    ctx := meta.(*ArmClient).StopContext

    name := d.Get("name").(string)
    resourceGroup := d.Get("resource_group").(string)

    if requireResourcesToBeImported {
        resp, err := client.Get(ctx, resourceGroup, name)
        if err != nil {
            if !utils.ResponseWasNotFound(resp.Response) {
                return fmt.Errorf("Error checking for present of existing Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
            }
        }
        if !utils.ResponseWasNotFound(resp.Response) {
            return tf.ImportAsExistsError("azurerm_private_endpoint", *resp.ID)
        }
    }

    id := d.Get("id").(string)
    location := azure.NormalizeLocation(d.Get("location").(string))
    etag := d.Get("etag").(string)
    manualPrivateLinkServiceConnections := d.Get("manual_private_link_service_connections").([]interface{})
    privateLinkServiceConnections := d.Get("private_link_service_connections").([]interface{})
    subnet := d.Get("subnet").([]interface{})
    tags := d.Get("tags").(map[string]interface{})

    parameters := network.PrivateEndpoint{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        Properties: &network.PrivateEndpointProperties{
            ManualPrivateLinkServiceConnections: expandArmPrivateEndpointPrivateLinkServiceConnection(manualPrivateLinkServiceConnections),
            PrivateLinkServiceConnections: expandArmPrivateEndpointPrivateLinkServiceConnection(privateLinkServiceConnections),
            Subnet: expandArmPrivateEndpointSubnet(subnet),
        },
        Tags: expandTags(tags),
    }


    future, err := client.CreateOrUpdate(ctx, resourceGroup, name, parameters)
    if err != nil {
        return fmt.Errorf("Error creating Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        return fmt.Errorf("Error waiting for creation of Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        return fmt.Errorf("Error retrieving Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
    }
    if resp.ID == nil {
        return fmt.Errorf("Cannot read Private Endpoint %q (Resource Group %q) ID", name, resourceGroup)
    }
    d.SetId(*resp.ID)

    return resourceArmPrivateEndpointRead(d, meta)
}

func resourceArmPrivateEndpointRead(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).privateEndpointsClient
    ctx := meta.(*ArmClient).StopContext

    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["privateEndpoints"]

    resp, err := client.Get(ctx, resourceGroup, name)
    if err != nil {
        if utils.ResponseWasNotFound(resp.Response) {
            log.Printf("[INFO] Private Endpoint %q does not exist - removing from state", d.Id())
            d.SetId("")
            return nil
        }
        return fmt.Errorf("Error reading Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
    }


    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("name", resp.Name)
    d.Set("resource_group", resourceGroup)
    if location := resp.Location; location != nil {
        d.Set("location", azure.NormalizeLocation(*location))
    }
    d.Set("etag", resp.Etag)
    if properties := resp.Properties; properties != nil {
        if err := d.Set("manual_private_link_service_connections", flattenArmPrivateEndpointPrivateLinkServiceConnection(properties.ManualPrivateLinkServiceConnections)); err != nil {
            return fmt.Errorf("Error setting `manual_private_link_service_connections`: %+v", err)
        }
        if err := d.Set("network_interfaces", flattenArmPrivateEndpointInterface(properties.NetworkInterfaces)); err != nil {
            return fmt.Errorf("Error setting `network_interfaces`: %+v", err)
        }
        if err := d.Set("private_link_service_connections", flattenArmPrivateEndpointPrivateLinkServiceConnection(properties.PrivateLinkServiceConnections)); err != nil {
            return fmt.Errorf("Error setting `private_link_service_connections`: %+v", err)
        }
        if err := d.Set("subnet", flattenArmPrivateEndpointSubnet(properties.Subnet)); err != nil {
            return fmt.Errorf("Error setting `subnet`: %+v", err)
        }
    }
    d.Set("type", resp.Type)
    flattenAndSetTags(d, resp.Tags)

    return nil
}


func resourceArmPrivateEndpointDelete(d *schema.ResourceData, meta interface{}) error {
    client := meta.(*ArmClient).privateEndpointsClient
    ctx := meta.(*ArmClient).StopContext


    id, err := parseAzureResourceID(d.Id())
    if err != nil {
        return err
    }
    resourceGroup := id.ResourceGroup
    name := id.Path["privateEndpoints"]

    future, err := client.Delete(ctx, resourceGroup, name)
    if err != nil {
        if response.WasNotFound(future.Response()) {
            return nil
        }
        return fmt.Errorf("Error deleting Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
    }

    if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
        if !response.WasNotFound(future.Response()) {
            return fmt.Errorf("Error waiting for deleting Private Endpoint %q (Resource Group %q): %+v", name, resourceGroup, err)
        }
    }

    return nil
}

func expandArmPrivateEndpointPrivateLinkServiceConnection(input []interface{}) *network.PrivateLinkServiceConnection {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    privateLinkServiceId := v["private_link_service_id"].(string)
    groupIds := v["group_ids"].(string)
    requestMessage := v["request_message"].(string)
    privateLinkServiceConnectionState := v["private_link_service_connection_state"].([]interface{})
    name := v["name"].(string)

    result := network.PrivateLinkServiceConnection{
        ID: utils.String(id),
        Name: utils.String(name),
        Properties: &network.PrivateLinkServiceConnectionProperties{
            GroupIds: utils.String(groupIds),
            PrivateLinkServiceConnectionState: expandArmPrivateEndpointPrivateLinkServiceConnectionState(privateLinkServiceConnectionState),
            PrivateLinkServiceID: utils.String(privateLinkServiceId),
            RequestMessage: utils.String(requestMessage),
        },
    }
    return &result
}

func expandArmPrivateEndpointSubnet(input []interface{}) *network.Subnet {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    addressPrefix := v["address_prefix"].(string)
    addressPrefixes := v["address_prefixes"].(string)
    networkSecurityGroup := v["network_security_group"].([]interface{})
    routeTable := v["route_table"].([]interface{})
    natGateway := v["nat_gateway"].([]interface{})
    serviceEndpoints := v["service_endpoints"].([]interface{})
    serviceEndpointPolicies := v["service_endpoint_policies"].([]interface{})
    resourceNavigationLinks := v["resource_navigation_links"].([]interface{})
    serviceAssociationLinks := v["service_association_links"].([]interface{})
    delegations := v["delegations"].([]interface{})
    privateEndpointNetworkPolicies := v["private_endpoint_network_policies"].(string)
    privateLinkServiceNetworkPolicies := v["private_link_service_network_policies"].(string)
    name := v["name"].(string)
    etag := v["etag"].(string)

    result := network.Subnet{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
        Properties: &network.SubnetPropertiesFormat{
            AddressPrefix: utils.String(addressPrefix),
            AddressPrefixes: utils.String(addressPrefixes),
            Delegations: expandArmPrivateEndpointDelegation(delegations),
            NatGateway: expandArmPrivateEndpointSubResource(natGateway),
            NetworkSecurityGroup: expandArmPrivateEndpointSecurityGroup(networkSecurityGroup),
            PrivateEndpointNetworkPolicies: utils.String(privateEndpointNetworkPolicies),
            PrivateLinkServiceNetworkPolicies: utils.String(privateLinkServiceNetworkPolicies),
            ResourceNavigationLinks: expandArmPrivateEndpointResourceNavigationLink(resourceNavigationLinks),
            RouteTable: expandArmPrivateEndpointRouteTable(routeTable),
            ServiceAssociationLinks: expandArmPrivateEndpointServiceAssociationLink(serviceAssociationLinks),
            ServiceEndpointPolicies: expandArmPrivateEndpointServiceEndpointPolicy(serviceEndpointPolicies),
            ServiceEndpoints: expandArmPrivateEndpointServiceEndpointPropertiesFormat(serviceEndpoints),
        },
    }
    return &result
}

func expandArmPrivateEndpointPrivateLinkServiceConnectionState(input []interface{}) *network.PrivateLinkServiceConnectionState {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    status := v["status"].(string)
    description := v["description"].(string)
    actionRequired := v["action_required"].(string)

    result := network.PrivateLinkServiceConnectionState{
        ActionRequired: utils.String(actionRequired),
        Description: utils.String(description),
        Status: utils.String(status),
    }
    return &result
}

func expandArmPrivateEndpointDelegation(input []interface{}) *network.Delegation {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    name := v["name"].(string)
    etag := v["etag"].(string)

    result := network.Delegation{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Name: utils.String(name),
    }
    return &result
}

func expandArmPrivateEndpointSubResource(input []interface{}) *network.SubResource {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)

    result := network.SubResource{
        ID: utils.String(id),
    }
    return &result
}

func expandArmPrivateEndpointSecurityGroup(input []interface{}) *network.SecurityGroup {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    tags := v["tags"].(map[string]interface{})
    etag := v["etag"].(string)

    result := network.SecurityGroup{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        Tags: expandTags(tags),
    }
    return &result
}

func expandArmPrivateEndpointResourceNavigationLink(input []interface{}) *network.ResourceNavigationLink {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    name := v["name"].(string)

    result := network.ResourceNavigationLink{
        ID: utils.String(id),
        Name: utils.String(name),
    }
    return &result
}

func expandArmPrivateEndpointRouteTable(input []interface{}) *network.RouteTable {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    tags := v["tags"].(map[string]interface{})
    etag := v["etag"].(string)

    result := network.RouteTable{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        Tags: expandTags(tags),
    }
    return &result
}

func expandArmPrivateEndpointServiceAssociationLink(input []interface{}) *network.ServiceAssociationLink {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    name := v["name"].(string)
    type := v["type"].(string)

    result := network.ServiceAssociationLink{
        ID: utils.String(id),
        Name: utils.String(name),
        Type: utils.String(type),
    }
    return &result
}

func expandArmPrivateEndpointServiceEndpointPolicy(input []interface{}) *network.ServiceEndpointPolicy {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    id := v["id"].(string)
    location := azure.NormalizeLocation(v["location"].(string))
    tags := v["tags"].(map[string]interface{})
    etag := v["etag"].(string)

    result := network.ServiceEndpointPolicy{
        Etag: utils.String(etag),
        ID: utils.String(id),
        Location: utils.String(location),
        Tags: expandTags(tags),
    }
    return &result
}

func expandArmPrivateEndpointServiceEndpointPropertiesFormat(input []interface{}) *network.ServiceEndpointPropertiesFormat {
    if len(input) == 0 {
        return nil
    }
    v := input[0].(map[string]interface{})

    service := v["service"].(string)
    locations := v["locations"].(string)

    result := network.ServiceEndpointPropertiesFormat{
        Locations: utils.String(locations),
        Service: utils.String(service),
    }
    return &result
}


func flattenArmPrivateEndpointPrivateLinkServiceConnection(input *network.PrivateLinkServiceConnection) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if properties := input.Properties; properties != nil {
        if groupIds := properties.GroupIds; groupIds != nil {
            result["group_ids"] = *groupIds
        }
        result["private_link_service_connection_state"] = flattenArmPrivateEndpointPrivateLinkServiceConnectionState(properties.PrivateLinkServiceConnectionState)
        if privateLinkServiceId := properties.PrivateLinkServiceID; privateLinkServiceId != nil {
            result["private_link_service_id"] = *privateLinkServiceId
        }
        if requestMessage := properties.RequestMessage; requestMessage != nil {
            result["request_message"] = *requestMessage
        }
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointInterface(input *network.Interface) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})


    return []interface{}{result}
}

func flattenArmPrivateEndpointSubnet(input *network.Subnet) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if properties := input.Properties; properties != nil {
        if addressPrefix := properties.AddressPrefix; addressPrefix != nil {
            result["address_prefix"] = *addressPrefix
        }
        if addressPrefixes := properties.AddressPrefixes; addressPrefixes != nil {
            result["address_prefixes"] = *addressPrefixes
        }
        result["delegations"] = flattenArmPrivateEndpointDelegation(properties.Delegations)
        result["nat_gateway"] = flattenArmPrivateEndpointSubResource(properties.NatGateway)
        result["network_security_group"] = flattenArmPrivateEndpointSecurityGroup(properties.NetworkSecurityGroup)
        if privateEndpointNetworkPolicies := properties.PrivateEndpointNetworkPolicies; privateEndpointNetworkPolicies != nil {
            result["private_endpoint_network_policies"] = *privateEndpointNetworkPolicies
        }
        if privateLinkServiceNetworkPolicies := properties.PrivateLinkServiceNetworkPolicies; privateLinkServiceNetworkPolicies != nil {
            result["private_link_service_network_policies"] = *privateLinkServiceNetworkPolicies
        }
        result["resource_navigation_links"] = flattenArmPrivateEndpointResourceNavigationLink(properties.ResourceNavigationLinks)
        result["route_table"] = flattenArmPrivateEndpointRouteTable(properties.RouteTable)
        result["service_association_links"] = flattenArmPrivateEndpointServiceAssociationLink(properties.ServiceAssociationLinks)
        result["service_endpoint_policies"] = flattenArmPrivateEndpointServiceEndpointPolicy(properties.ServiceEndpointPolicies)
        result["service_endpoints"] = flattenArmPrivateEndpointServiceEndpointPropertiesFormat(properties.ServiceEndpoints)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointPrivateLinkServiceConnectionState(input *network.PrivateLinkServiceConnectionState) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if actionRequired := input.ActionRequired; actionRequired != nil {
        result["action_required"] = *actionRequired
    }
    if description := input.Description; description != nil {
        result["description"] = *description
    }
    if status := input.Status; status != nil {
        result["status"] = *status
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointDelegation(input *network.Delegation) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointSubResource(input *network.SubResource) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointSecurityGroup(input *network.SecurityGroup) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    // TODO: setting tags to result is not supported

    return []interface{}{result}
}

func flattenArmPrivateEndpointResourceNavigationLink(input *network.ResourceNavigationLink) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointRouteTable(input *network.RouteTable) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    // TODO: setting tags to result is not supported

    return []interface{}{result}
}

func flattenArmPrivateEndpointServiceAssociationLink(input *network.ServiceAssociationLink) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if type := input.Type; type != nil {
        result["type"] = *type
    }

    return []interface{}{result}
}

func flattenArmPrivateEndpointServiceEndpointPolicy(input *network.ServiceEndpointPolicy) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if id := input.ID; id != nil {
        result["id"] = *id
    }
    if location := input.Location; location != nil {
        result["location"] = azure.NormalizeLocation(*location)
    }
    if etag := input.Etag; etag != nil {
        result["etag"] = *etag
    }
    // TODO: setting tags to result is not supported

    return []interface{}{result}
}

func flattenArmPrivateEndpointServiceEndpointPropertiesFormat(input *network.ServiceEndpointPropertiesFormat) []interface{} {
    if input == nil {
        return make([]interface{}, 0)
    }

    result := make(map[string]interface{})

    if locations := input.Locations; locations != nil {
        result["locations"] = *locations
    }
    if service := input.Service; service != nil {
        result["service"] = *service
    }

    return []interface{}{result}
}
