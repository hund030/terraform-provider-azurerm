// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"log"

	"github.com/Azure/azure-sdk-for-go/services/network/mgmt/2019-06-01/network"
	"github.com/hashicorp/terraform/helper/schema"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/azure"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/response"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/validate"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func resourceArmP2sVpnGateway() *schema.Resource {
	return &schema.Resource{
		Create: resourceArmP2sVpnGatewayCreateUpdate,
		Read:   resourceArmP2sVpnGatewayRead,
		Update: resourceArmP2sVpnGatewayCreateUpdate,
		Delete: resourceArmP2sVpnGatewayDelete,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validate.NoEmptyStrings,
			},

			"location": azure.SchemaLocation(),

			"resource_group_name": azure.SchemaResourceGroupNameDiffSuppress(),

			"p2svpn_server_configuration_id": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: azure.ValidateResourceID,
			},

			"virtual_hub_id": {
				Type:         schema.TypeString,
				Required:     true,
				ValidateFunc: azure.ValidateResourceID,
			},

			"vpn_client_address_pool_prefixes": {
				Type:     schema.TypeList,
				Required: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"custom_route_address_prefixes": {
				Type:     schema.TypeList,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"scale_unit": {
				Type:     schema.TypeInt,
				Optional: true,
			},

			"tags": tagsSchema(),

			"vpn_client_connection_health": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"allocated_ip_addresses": {
							Type:     schema.TypeList,
							Computed: true,
							Elem:     &schema.Schema{Type: schema.TypeString},
						},
						"total_egress_bytes_transferred": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"total_ingress_bytes_transferred": {
							Type:     schema.TypeInt,
							Computed: true,
						},
						"vpn_client_connections_count": {
							Type:     schema.TypeInt,
							Computed: true,
						},
					},
				},
			},
		},
	}
}

func resourceArmP2sVpnGatewayCreateUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).network.P2sVpnGatewayClient
	ctx := meta.(*ArmClient).StopContext

	name := d.Get("name").(string)
	resourceGroup := d.Get("resource_group_name").(string)

	if requireResourcesToBeImported {
		resp, err := client.Get(ctx, resourceGroup, name)
		if err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Error checking for present of existing P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
			}
		}
		if !utils.ResponseWasNotFound(resp.Response) {
			return tf.ImportAsExistsError("azurerm_p2s_vpn_gateway", *resp.ID)
		}
	}

	id := d.Get("id").(string)
	location := azure.NormalizeLocation(d.Get("location").(string))
	customRouteAddressPrefixes := d.Get("custom_route_address_prefixes").([]interface{})
	p2svpnServerConfigurationID := d.Get("p2svpn_server_configuration_id").(string)
	scaleUnit := d.Get("scale_unit").(int)
	virtualHubID := d.Get("virtual_hub_id").(string)
	vpnClientAddressPoolPrefixes := d.Get("vpn_client_address_pool_prefixes").([]interface{})
	tags := d.Get("tags").(map[string]interface{})

	p2svpnGatewayParameters := network.P2SVpnGateway{
		ID:       utils.String(id),
		Location: utils.String(location),
		P2SVpnGatewayProperties: &network.P2SVpnGatewayProperties{
			CustomRoutes: &network.AddressSpace{
				AddressPrefixes: utils.ExpandStringSlice(customRouteAddressPrefixes),
			},
			P2SVpnServerConfiguration: &network.SubResource{
				ID: utils.String(p2svpnServerConfigurationID),
			},
			VirtualHub: &network.SubResource{
				ID: utils.String(virtualHubID),
			},
			VpnClientAddressPool: &network.AddressSpace{
				AddressPrefixes: utils.ExpandStringSlice(vpnClientAddressPoolPrefixes),
			},
			VpnGatewayScaleUnit: utils.Int32(int32(scaleUnit)),
		},
		Tags: expandTags(tags),
	}

	future, err := client.CreateOrUpdate(ctx, resourceGroup, name, p2svpnGatewayParameters)
	if err != nil {
		return fmt.Errorf("Error creating P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
	}
	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		return fmt.Errorf("Error waiting for creation of P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
	}

	resp, err := client.Get(ctx, resourceGroup, name)
	if err != nil {
		return fmt.Errorf("Error retrieving P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
	}
	if resp.ID == nil {
		return fmt.Errorf("Cannot read P2s Vpn Gateway %q (Resource Group %q) ID", name, resourceGroup)
	}
	d.SetId(*resp.ID)

	return resourceArmP2sVpnGatewayRead(d, meta)
}

func resourceArmP2sVpnGatewayRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).network.P2sVpnGatewayClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	name := id.Path["p2svpnGateways"]

	resp, err := client.Get(ctx, resourceGroup, name)
	if err != nil {
		if utils.ResponseWasNotFound(resp.Response) {
			log.Printf("[INFO] P2s Vpn Gateway %q does not exist - removing from state", d.Id())
			d.SetId("")
			return nil
		}
		return fmt.Errorf("Error reading P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
	}

	d.Set("name", resp.Name)
	d.Set("resource_group_name", resourceGroup)
	if location := resp.Location; location != nil {
		d.Set("location", azure.NormalizeLocation(*location))
	}
	if p2SVpnGatewayProperties := resp.P2SVpnGatewayProperties; p2SVpnGatewayProperties != nil {
		if customRoutes := p2SVpnGatewayProperties.CustomRoutes; customRoutes != nil {
			d.Set("custom_route_address_prefixes", utils.FlattenStringSlice(customRoutes.AddressPrefixes))
		}
		if p2SVpnServerConfiguration := p2SVpnGatewayProperties.P2SVpnServerConfiguration; p2SVpnServerConfiguration != nil {
			d.Set("p2svpn_server_configuration_id", p2SVpnServerConfiguration.ID)
		}
		d.Set("scale_unit", int(*p2SVpnGatewayProperties.VpnGatewayScaleUnit))
		if virtualHub := p2SVpnGatewayProperties.VirtualHub; virtualHub != nil {
			d.Set("virtual_hub_id", virtualHub.ID)
		}
		if vpnClientAddressPool := p2SVpnGatewayProperties.VpnClientAddressPool; vpnClientAddressPool != nil {
			d.Set("vpn_client_address_pool_prefixes", utils.FlattenStringSlice(vpnClientAddressPool.AddressPrefixes))
		}
		if err := d.Set("vpn_client_connection_health", flattenArmP2sVpnGatewayVpnClientConnectionHealth(p2SVpnGatewayProperties.VpnClientConnectionHealth)); err != nil {
			return fmt.Errorf("Error setting `vpn_client_connection_health`: %+v", err)
		}
	}
	flattenAndSetTags(d, resp.Tags)

	return nil
}

func resourceArmP2sVpnGatewayDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*ArmClient).network.P2sVpnGatewayClient
	ctx := meta.(*ArmClient).StopContext

	id, err := parseAzureResourceID(d.Id())
	if err != nil {
		return err
	}
	resourceGroup := id.ResourceGroup
	name := id.Path["p2svpnGateways"]

	future, err := client.Delete(ctx, resourceGroup, name)
	if err != nil {
		if response.WasNotFound(future.Response()) {
			return nil
		}
		return fmt.Errorf("Error deleting P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
	}

	if err = future.WaitForCompletionRef(ctx, client.Client); err != nil {
		if !response.WasNotFound(future.Response()) {
			return fmt.Errorf("Error waiting for deleting P2s Vpn Gateway %q (Resource Group %q): %+v", name, resourceGroup, err)
		}
	}

	return nil
}

func flattenArmP2sVpnGatewayVpnClientConnectionHealth(input *network.VpnClientConnectionHealth) []interface{} {
	if input == nil {
		return make([]interface{}, 0)
	}

	result := make(map[string]interface{})

	result["allocated_ip_addresses"] = utils.FlattenStringSlice(input.AllocatedIPAddresses)
	if totalEgressBytesTransferred := input.TotalEgressBytesTransferred; totalEgressBytesTransferred != nil {
		result["total_egress_bytes_transferred"] = int(*totalEgressBytesTransferred)
	}
	if totalIngressBytesTransferred := input.TotalIngressBytesTransferred; totalIngressBytesTransferred != nil {
		result["total_ingress_bytes_transferred"] = int(*totalIngressBytesTransferred)
	}
	if vpnClientConnectionsCount := input.VpnClientConnectionsCount; vpnClientConnectionsCount != nil {
		result["vpn_client_connections_count"] = int(*vpnClientConnectionsCount)
	}

	return []interface{}{result}
}
