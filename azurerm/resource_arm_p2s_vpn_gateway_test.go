// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file at
//     https://github.com/Azure/magic-module-specs
//
// ----------------------------------------------------------------------------

package azurerm

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform/helper/resource"
	"github.com/hashicorp/terraform/terraform"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/helpers/tf"
	"github.com/terraform-providers/terraform-provider-azurerm/azurerm/utils"
)

func TestAccAzureRMP2sVpnGateway_basic(t *testing.T) {
	resourceName := "azurerm_p2s_vpn_gateway.test"
	ri := tf.AccRandTimeInt()
	location := testLocation()

	resource.ParallelTest(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testCheckAzureRMP2sVpnGatewayDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccAzureRMP2sVpnGateway_basic(ri, location),
				Check: resource.ComposeTestCheckFunc(
					testCheckAzureRMP2sVpnGatewayExists(resourceName),
					resource.TestCheckResourceAttr(resourceName, "virtual_hub_id", "/subscriptions/67a9759d-d099-4aa8-8675-e6cfd669c3f4/resourceGroups/demo1-zhijie-westus2/providers/Microsoft.Network/virtualHubs/zhijie-vh-westus2"),
					resource.TestCheckResourceAttr(resourceName, "p2s_vpn_server_configuration_id", "/subscriptions/67a9759d-d099-4aa8-8675-e6cfd669c3f4/resourceGroups/demo1-zhijie-westus2/providers/Microsoft.Network/virtualWans/zhijie-vw-westus2/p2sVpnServerConfigurations/zhijie-p2scfg-westus2"),
					resource.TestCheckResourceAttr(resourceName, "vpn_client_address_pool_prefixes.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "vpn_client_address_pool_prefixes.0", "101.3.0.0/16"),
				),
			},
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testCheckAzureRMP2sVpnGatewayExists(resourceName string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[resourceName]
		if !ok {
			return fmt.Errorf("P2s Vpn Gateway not found: %s", resourceName)
		}

		name := rs.Primary.Attributes["name"]
		resourceGroup := rs.Primary.Attributes["resource_group_name"]

		client := testAccProvider.Meta().(*ArmClient).network.P2sVpnGatewayClient
		ctx := testAccProvider.Meta().(*ArmClient).StopContext

		if resp, err := client.Get(ctx, resourceGroup, name); err != nil {
			if utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Bad: P2s Vpn Gateway %q (Resource Group %q) does not exist", name, resourceGroup)
			}
			return fmt.Errorf("Bad: Get on P2sVpnGatewayClient: %+v", err)
		}

		return nil
	}
}

func testCheckAzureRMP2sVpnGatewayDestroy(s *terraform.State) error {
	client := testAccProvider.Meta().(*ArmClient).network.P2sVpnGatewayClient
	ctx := testAccProvider.Meta().(*ArmClient).StopContext

	for _, rs := range s.RootModule().Resources {
		if rs.Type != "azurerm_p2s_vpn_gateway" {
			continue
		}

		name := rs.Primary.Attributes["name"]
		resourceGroup := rs.Primary.Attributes["resource_group_name"]

		if resp, err := client.Get(ctx, resourceGroup, name); err != nil {
			if !utils.ResponseWasNotFound(resp.Response) {
				return fmt.Errorf("Bad: Get on P2sVpnGatewayClient: %+v", err)
			}
		}

		return nil
	}

	return nil
}

func testAccAzureRMP2sVpnGateway_basic(rInt int, location string) string {
	return fmt.Sprintf(`
resource "azurerm_resource_group" "test" {
  name     = "acctestRG-%d"
  location = "%s"
}

resource "azurerm_p2s_vpn_gateway" "test" {
  name                             = "acctestgateway-%d"
  resource_group_name              = "${azurerm_resource_group.test.name}"
  location                         = "${azurerm_resource_group.test.location}"
  virtual_hub_id                   = "/subscriptions/67a9759d-d099-4aa8-8675-e6cfd669c3f4/resourceGroups/demo1-zhijie-westus2/providers/Microsoft.Network/virtualHubs/zhijie-vh-westus2"
  p2svpn_server_configuration_id  = "/subscriptions/67a9759d-d099-4aa8-8675-e6cfd669c3f4/resourceGroups/demo1-zhijie-westus2/providers/Microsoft.Network/virtualWans/zhijie-vw-westus2/p2sVpnServerConfigurations/zhijie-p2scfg-westus2"
  vpn_client_address_pool_prefixes = ["101.3.0.0/16"]
}
`, rInt, location, rInt)
}
